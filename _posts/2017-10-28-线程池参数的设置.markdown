---
layout: post
title: 线程池参数的设置
date: 2017-11-20 13:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: how-to-start.jpg # Add image post (optional)
tags: [academic]
---
Don't be jealous of others. Because you never know how much you will get in the next second. 

之前实习找公司去途牛旅游面试时候，面试官问了我一个线程池方面的问题，让我印象很深刻，如果让你自己设计一个线程池，里面的
参数应该如何确定，其实我之前是有看过Java线程池的部分源码的，所以对线程池里面的一些关键参数印象还是很深的，比如corePoolSize,
maximumPoolSize,keepAliveTime，handler等都能说出个所以然来，但是对于实际情况参数的设定并没有过多的考虑，当时回答了和
CPU的核数以及系统的负载等条件有关，面试结束后，我详细的查了一些资料，学习如何具体设置线程池的参数。

### corePoolSize
corePoolSize表示核心线程池的大小，在创建线程池后，默认情况下，线程池中没有任何线程，而是等待任务到来以后才会去创建线程，
除非调用了preStartAllCoreThreads()或者preStartCoreThread()方法，预先创建线程。因此在默认情况下，创建线程后，线程池中的线程
数量为0，当有任务来时，则创建一个线程去执行任务，当线程池中的线程数量达到corePoolSize时，就会把后续达到的任务放到缓存队列中。如果添加
成功，则该任务会等空闲线程将其取出后去执行，如果添加失败（一般来说是任务缓存队列已经满了），则会尝试创建新的线程去执行这个任务。

### maximumPoolSize
表示线程池的最大线程数，如果当前线程中的线程数量达到最大时，会采用拒绝策略进行处理。

### keepAliveTime
表示线程没有任务执行时，最后保持多久时间会终止。默认情况下，只有当线程池中的线程数量大于corePoolSize时，keepAliveTime才会起作用，
直到线程池中的线程数量不大于corePoolSize，即当线程池中的数量大于corePoolSize时，如果一个线程的空闲时间达到keepAliveTime，则会终止。
但是如果调用了allowCoreThreadTimeOut(boolean)时，当线程池中的数量不大于corePoolSize时，keepAliveTime也会起作用，直到线程池
中线程的数量为0为止。

### unit
keepAliveTime的时间单位

### workQueue
一个阻塞队列，用来存储等待执行的任务。LinkBlockingQueue,SynchronousQueue

workQueue的类型为BlockingQueue<Runnable>，通常可以取下面三种类型：

1）ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小；

2）LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；

3）synchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。

newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使用的LinkedBlockingQueue；

newSingleThreadExecutor将corePoolSize和maximumPoolSize都设置为1，也使用的LinkedBlockingQueue；

newCachedThreadPool将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE，使用的SynchronousQueue（数据是在配对的生产者和消费者线程之间直接传递的，并不会将数据缓冲数据到队列中），也就是说来了任务就创建线程运行，当线程空闲超过60秒，就销毁线程。

### workQueue
拒绝策略，主要有四种：

ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。

ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。

ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）

ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 这个策略重试添加当前的任务，他会自动重复调用 execute() 方法，直到成功

### 线程池参数具体设置
参数的设置跟系统的负载有直接的关系，下面为系统负载的相关参数：

>tasks，每秒需要处理的最大任务数量

>tasktime，处理第个任务所需要的时间

>responsetime，系统允许任务最大的响应时间，比如每个任务的响应时间不得超过2秒

# corePoolSize:

每个任务需要tasktime秒处理，则每个线程每钞可处理1/tasktime个任务。系统每秒有tasks个任务需要处理，则需要的线程数为：

>tasks / (1 / tasktime) 即tasks*tasktime个线程数。

假设系统每秒任务数为100 ~ 1000，每个任务耗时0.1秒，则需要100 * 0.1至1000 * 0.1，即10 ~ 100个线程。
那么corePoolSize应该设置为大于10，具体数字最好根据8020原则，即80%情况下系统每秒任务数，若系统80%的情况下第秒任务数小于200，
最多时为1000，则corePoolSize可设置为20。

# queueCapacity:

任务队列的长度要根据核心线程数，以及系统对任务响应时间的要求有关。队列长度可以设置为

>corePoolSize *（responsetime / tasktime） ：20 *（2 / 0.1）=400

即队列长度可设置为400。

队列长度设置过大，会导致任务响应时间过长，切忌以下写法：

>LinkedBlockingQueue queue = new LinkedBlockingQueue();

这实际上是将队列长度设置为Integer.MAX_VALUE，将会导致线程数量永远为corePoolSize，再也不会增加，当任务数量陡增时，任务响应时间也将随之陡增。

# maxPoolSize:

当系统负载达到最大值时，核心线程数已无法按时处理完所有任务，这时就需要增加线程。每秒200个任务需要20个线程，那么当每秒达到1000个任务时，则需要

>(1000 - queueCapacity) * (20 / 200) = 60

即60个线程，可将maxPoolSize设置为60。

# keepAliveTime:

线程数量只增加不减少也不行。当负载降低时，可减少线程数量，如果一个线程空闲时间达到keepAliveTiime，该线程就退出。默认情况下线程池最少会保持corePoolSize个线程。

# allowCoreThreadTimeout:

默认情况下核心线程不会退出，可通过将该参数设置为true，让核心线程也退出。

以上关于线程数量的计算并没有考虑CPU的情况。若结合CPU的情况，比如，当线程数量达到50时，CPU达到100%，则将maxPoolSize设置为60也不合适，
此时若系统负载长时间维持在每秒1000个任务，则超出线程池处理能力，应设法降低每个任务的处理时间(tasktime)。

>关于CPU负载这一块将单独开一篇博客进行论述

### 线程池使用场景
FixedThreadPool适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，它适用于负载比较重的服务器。

SingleThreadExecutor适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多个线程是活动的应用场景。

CachedThreadPool是大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器。

ScheduledThreadPoolExecutor适用于需要多个后台线程执行周期任务，同时为了满足资源管理的需求而需要限制后台线程的数量的应用场景。

SingleThreadScheduledExecutor适用于需要单个后台线程执行周期任务，同时需要保证顺序地执行各个任务的应用场景。

Future接口和实现Future接口的FutureTask类用来表示异步计算的结果。

### 总结
通过每一次面试，都能学习到很多忽略的细节知识，最后通过了途牛旅游的面试，虽然最后选择了另一家公司，但非常感谢给予这次面试机会。


