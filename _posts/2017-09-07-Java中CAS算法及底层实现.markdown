---
layout: post
title: Java中CAS算法及底层实现
date: 2017-09-07 13:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: how-to-start.jpg # Add image post (optional)
tags: [academic]
---
Don't be jealous of others. Because you never know how much you will get in the next second. 

### CAS算法：
CAS操作：需要三个操作数，内存值V，旧的预期值A，新值B。CAS指令执行时，当且仅当内存值V等于旧的预期值B时，才将内存值V更新为B，否则就不执行更新，
但是无论是否更新了内存值，都会返回V的旧值，这个一个原子操作。java中使用CAS操作，
由sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供，Unsafe类不是给用户程序提供的类，
限制了只有启动类加载器加载的Class才能访问它，如果不采用反射，我们只能通过整数原子类来使用CAS操作，
里面的compareAndSet和getAndIncrement等方法都使用了Unsafe类的CAS操作。对于CAS操作的ABA问题，提
供了一个带有标记的原子引用类AtomicStampedReference，它可以通过控制变量值的版本来保证CAS操作的正确性。CPU通过一句处理器指令就能完成CAS操作。

基于冲突检测的乐观并发策略，先进行操作，如果没有其它线程争用共享数据，那操作就成功了，如果共享数据有竞争，产生了冲突，
可以用其它措施补救，例如不断重试，直到成功为止（CAS操作实现），这种方式不需要将线程阻塞挂起，是非阻塞同步。

### CAS算法底层实现：
CAS算法，首先通过os::is_MP()来判断当前系统是否为多核系统，如果是，在执行cmpxchgl指令前，先通过LOCK_IF_MP宏定义将CPU总线锁住，这样同一芯片上其它处理器就暂时不能通过总线来访问内存，保证了该指令在多处理器环境下的原子性。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。

总线锁定和缓存锁定来保证复杂内存操作的原子性

总线锁就是使用处理器提供的一个LOCK＃信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住,那么该处理器可以独占使用共享内存。

在同一时刻我们只需保证对某个内存地址的操作是原子性即可，但总线锁定把CPU和内存之间通信锁住了，这使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定的开销比较大，最近的处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。

缓存锁定就是如果缓存在处理器缓存行中内存区域在LOCK操作期间被锁定，当它执行锁操作回写内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时会起缓存行无效，在例1中，当CPU1修改缓存行中的i时使用缓存锁定，那么CPU2就不能同时缓存了i的缓存行。

但是有两种情况下处理器不会使用缓存锁定。第一种情况是：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line），则处理器会调用总线锁定。第二种情况是：有些处理器不支持缓存锁定。

### CAS算法出现的问题：
CAS实现原子操作产生的问题：

1、ABA问题  可以通过版本号机制解决

2、自旋CAS如果长时间不成功，会给CPU带来很大的执行开销  可以通过加时间判断

3、只能保证一个共享变量的原子操作 
