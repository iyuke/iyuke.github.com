---
layout: post
title: 背包问题
date: 2017-09-02 13:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: how-to-start.jpg # Add image post (optional)
tags: [academic]
---
Don't be jealous of others. Because you never know how much you will get in the next second. 

### 背包问题代码
{% highlight ruby %} 
package com.company;

public class DTGHProblem {
    //所有物品
    private Knapsack[] bags;
    //物品数量
    private int n;
    //背包总承重
    private int totalWeight;
    //当前第几个物品   当前背包承重
    private int[][] bestValues;
    //最终包的最大价值
    private int bestValue;

    public DTGHProblem(Knapsack[] bags, int totalWeight){
        this.bags = bags;
        this.n = bags.length;
        this.totalWeight = totalWeight;
        this.bestValues = new int[n + 1][totalWeight + 1];
    }

    public void resolve(){
    // 遍历背包的承重 
        for(int j = 0;j <= totalWeight;j++){
        // 遍历指定物品 
            for(int i = 0;i <= n ;i++){
                // 当背包不放入物品或承重为0时，其最大价值均为0
                if(i == 0 || j == 0){
                    bestValues[i][j]=0;
                }else{
                    // 如果第 i个物品重量大于总承重，则最优解存在于前 i-1 个背包中
                    if(j < bags[i-1].getWeight()){
                       bestValues[i][j] = bestValues[i - 1][j];
                    }else{
                        // 如果第 i个物品不大于总承重，则最优解要么是包含第 i个背包的最优解，
                        // 要么是不包含第 i个背包的最优解， 取两者最大值  
                        int weight = bags[i - 1].getWeight();
                        int value = bags[i - 1].getValue();
                        bestValues[i][j] = Math.max(bestValues[i - 1][j], 
                                                    value + bestValues[i - 1][j - weight]);
                    }
                }
            }
        }
        this.bestValue = bestValues[n][totalWeight];
    }

    public int getBestValue() {
        return bestValue;
    }
}
{% endhighlight %}

### 礼物的最大价值代码
{% highlight ruby %} 
public class MaxValue {
    public static void main(String[] args) {
        int[][] arr = [{1,10,3,8},{12,2,9,6},{5,7,4,11},{3,7,16,5}]; //数组，markdown用{}报错
        int res = maxValue(arr);
        System.out.println(res);
    }
    public static int maxValue(int[][] arr){
        if(arr == null || arr[0] == null){
            return -1;
        }
        int rows = arr.length;
        int cols = arr[0].length;
        int[][] results = new int[rows][cols];
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(i == 0 && j == 0){
                    results[0][0] = arr[0][0];
                }else if(i == 0){
                    results[0][j] = results[0][j-1] + arr[0][j];
                }else if(j == 0){
                    results[i][0] = results[i-1][0] + arr[i][0];
                }else{
                    results[i][j] = Math.max(results[i-1][j], results[i][j-1]) + arr[i][j];
                }
            }
        }
        return results[rows-1][cols-1];
    }
}
{% endhighlight %}


