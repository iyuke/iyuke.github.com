---
layout: post
title: 深入理解Synchronized
date: 2018-02-01 13:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: i-rest.jpg # Add image post (optional)
tags: [academic]
---
synchronized实现原理：synchronized可以保证某个时刻，只有一个线程可以执行某个方法或者某个代码块。synchronized有三种用法，
修饰实例方法时，进入代码时要获得实例对象的锁，修饰静态方法时，进入同步代码前要获得类对象的锁，修饰同步代码块时，
要指定相应的锁对象。synchronized修饰同步方法和同步代码块，底层实现是不一样的。当修饰同步代码块时，synchronized关键字经过编译后，
会在同步代码块前后分别形成monitorenter和monitorexit这两个字节码的指令，并且这两个指令都需要一个refenence类型的参数来指名
要锁定和解锁的对象。当执行monitorenter指令的时，首先要尝试获取对象的锁。如果这个对象还没有被锁定，或者当前线程已经拥有了那个对象的锁，
把锁的计数器＋1，相应的在执行monitorexit时，会将锁计数器－1，当计数器是0时，锁就释放了。如果获取对象锁失败，则当前线程阻塞。
synchronized修饰方法时，无需通过字节码指令来完成，它实现在方法调用和返回之中，JVM可以从常量池中的方法表结构中
的ACC_SYNCHRONIZED访问标志来区别一个方法是不是同步方法。当方法调用时，调用指令会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，
如果设置了，线程将先持有monitor，再执行方法，执行完之后，释放monitor。在方法执行期间，如果一个线程持有了monitor，
其他线程将无法再获取同一个monitor，如果一个同步方法在执行期间抛出了异常，并且内部无法处理，那这个同步方法所持有的monitor将在异常抛到同步方法之外时自动释放。

### 锁膨胀机制
偏向锁，轻量级锁，重量级锁。首先在对象头重存储这锁标志位（01未锁定，00轻量级锁定，10重量级锁定，01可偏向），偏向锁的目的时消除数据在无竞争情况喜爱的同步，提高程序运行性能，这个锁会偏向第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其它线程获取，则持有偏向锁的线程永远不需要同步。
当一个对象刚开始实例化的时候，没有任何线程来访问它，这时候它是可偏向的。它认为只可能有一个线程来访问它，所以当第一个线程来的时候，它就偏向这个线程，此时，对象持有偏向锁，偏向第一个线程，这个线程修改对象头为偏向锁的 时候使用CAS操作，并将对象头中的ThreadID改为自己的ID，之后这个线程再访问这个对象时，不需要同步，连CAS操作也不用。当有第二个线程访问这个对象的时候，因为偏向锁不会主动释放，所以第二个线程查看对象的偏向状态，这是说明这个对象已经存在竞争了，接着查看持有锁的这个线程是否依然存活，如果死亡了，把这个对象置为无锁状态，并且重新偏向这个新的线程，如果依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍需要偏向锁，则把偏向锁升级为轻量级锁，如果不存在使用了，则也把对象变为无锁状态，重新偏向。轻量级锁认为竞争存在，但是程度很轻，一般两个线程对于一个锁的操作都会错开，通过自旋稍微等待另一个线程释放锁，轻量级锁的加锁和解锁都是通过CAS操作来实现的。但是如果自旋时间过长，或者一个线程持有锁，一个线程在自旋，又来了一个线程，这时就升级成了重量级锁。

>可以通过－XX:-UseBiasedLocking来禁止偏向锁优化